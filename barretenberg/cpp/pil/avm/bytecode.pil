namespace bytecode(256);

    // Raw bytes
    pol commit bytes;
    pol commit bytes_pc;

    // =============== BYTECODE DECOMPOSITION =================================================
    // Decomposed into 35 byte chunks to parse into instructions
    pol commit decomposed;

    // =============== BYTECODE ENCODING =================================================
    // Bytes packed into 31 byte chunks
    pol commit as_fields;

    // =============== BYTECODE HASHING + ADDRESS DERIVATION =================================================
    pol commit length_remaining;

    // Bytecode public commitment hash
    pol commit running_hash;

    // When this is 1, it represents when reached the end of a contract bytecode
    pol commit end_latch;
    end_latch * (1 - end_latch) = 0;

    /* Derive Class Id */
    pol CONTRACT_LEAF = 16;
    pol commit arifact_hash;
    pol commit private_fn_root;
    // class_id = H(CONTRACT_LEAF, artifact_hash, private_fn_root, running_hash)
    pol commit class_id;

    /* Derive Contract Addr*/
    pol CONTRACT_ADDRESS_V1 = 15;
    pol PARTIAL_ADDRESS = 27;
    // pol SALTED_INIT_HASH = H(PARTIAL_ADDR, salt, init_hash, deployer_addr);
    // pol PARTIAL_ADDR = H(PARTIAL_ADDR, class_id, SALTED_INIT_HASH);
    pol commit salt;
    pol commit initialization_hash;
    pol commit deployer_addr;
    pol commit public_key_hash;
    // contract_address = H(CONTRACT_ADDRESS_V1, public_key_hash, partial_address)
    pol commit contract_address;

